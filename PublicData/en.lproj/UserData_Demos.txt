{ 
"overview": "Capability Demos",
"data": [ 
{"data":"≪ \"\nSome of the things the calculator can do.\n\nTap each soft-key in turn.\" 4 alertWithDelay ≫","name":"⌸","comment":"Read me"},
{"data":"function() {      \n    calculator.functions[\"@draw\"]();\n    if (!display.hasShownGraphMsg) {\n        display.hasShownGraphMsg = true;\n        setTimeout(function() { string.alertWithDelay(\"Two graphs.\\n\\nTap ◉ to go fullscreen.\\nPinch to zoom, two-finger drag to pan.\\nTwo-finger tap to take a screenshot.\\n\\nTap ✓ when done.\", 10); }, 0);\n    }\n}","name":"graph","comment":""},
{"data":"function() {         \n    if (\"lineInterval\" in display && \"blankInterval\" in display) {\n        clearInterval(display.lineInterval);\n        clearInterval(display.blankInterval);\n    }\n    display.showGraphics(true);\n    var context = canvas.getContext('2d');\n\n    var lastX = context.canvas.width * Math.random();\n    var lastY = context.canvas.height * Math.random();\n    \n    var hue = 0;\n    function line() {\n        context.save();\n        context.translate(context.canvas.width/2, context.canvas.height/2);\n        context.scale(0.9, 0.9);\n        context.translate(-context.canvas.width/2, -context.canvas.height/2);\n        context.beginPath();\n        context.lineWidth = 5 + Math.random() * 10;\n        context.moveTo(lastX, lastY);\n        lastX = context.canvas.width * Math.random();\n        lastY = context.canvas.height * Math.random();\n        context.bezierCurveTo(context.canvas.width * Math.random(),\n                              context.canvas.height * Math.random(),\n                              context.canvas.width * Math.random(),\n                              context.canvas.height * Math.random(),\n                              lastX, lastY);\n        \n        hue = hue + 10 * Math.random();\n        context.strokeStyle = 'hsl(' + hue + ', 50%, 50%)';\n        context.shadowColor = 'white';\n        context.shadowBlur = 10;\n        context.stroke();\n        context.restore();\n    }\n    display.lineInterval = setInterval(line, 50);\n    \n    function blank() {\n        context.fillStyle = 'rgba(255,255,255,0.1)';\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n    }\n    display.blankInterval = setInterval(blank, 40);\n\n    canvas.addEventListener(\"unload\", function() { clearInterval(display.lineInterval); delete display.lineInterval; clearInterval(display.blankInterval); delete display.blankInterval; });\n\n    if (!display.hasShownScribbleMsg) {\n        display.hasShownScribbleMsg = true;\n    setTimeout(function() { string.alertWithDelay(\"The calculator is programmable in 3 powerful languages.\\n\\nHere's the result of running a small JavaScript program which draws random Bézier curves with a fade effect.\\n\\nTap ◉ to see this fullscreen.\\n\\nTap ✓ when done.\", 9); }, 0);\n    }\n}","name":"scribble","comment":"JS"},
{"data":"≪ stopAnyGraphics 'e^(i*π)+1 == 0' dup num\n\"Here's an expression (Euler's Identity) which raises the number 'e' to an imaginary Pi, and the evaluated result (true).\n\nThis calculator is at home with complex numbers.\"\n 9 alertWithDelay ≫","name":"Euler","comment":"Complex expression"},
{"data":"function() {    \n    string.alertWithDelay(\"Speaking of 'e', here it is to 200 digits.\\n\\nScroll sideways to see all digits.\\n\\nThis comes from a downloadable folder, which features arbitrary precision constants.\", 10);\n\n    function _e(nDigits) {\n    var numerator = BigNum[\"pow\"](BigNum.toDec(BigNum.fromNumber(10)), BigNum.fromNumber(nDigits));\n    var bigE = BigNum[\"+\"](numerator, numerator); // first two terms\n    var factorial = BigInteger.ONE;\n    var counter = BigInteger.ONE;\n    var seriesVal;\n    do {\n        factorial = BigNum[\"*\"](factorial, counter = BigNum.incr(counter));\n        seriesVal = BigNum[\"/\"](numerator, factorial);\n        bigE = BigNum[\"+\"](bigE, seriesVal);\n    }\n    while (BigNum[\">\"](seriesVal, BigInteger.ZERO));\n\n    return new BigNumber(\"2.\" + BigNum.toString(bigE).slice(1,-2), nDigits);\n    }\n\n    return _e(200);\n}","name":"e_big","comment":"Euler number to 200 digits"},
{"data":"≪ 43 toSqrtCF\n\"Here's the continued fraction for the square root of 43.\n\nTo evaluate it to a high-precision decimal number, tap eval.\n\n(And, yes, you can subsequently do math with the two BigFloats on the stack.)\"\n 10 alertWithDelay ≫","name":"CFs","comment":""},
{"data":"≪ 'cos(1/(8-x))' =:ex\n    0 8 ex 'x' integrate\n\"There're hundreds of functions, defined on a dozen data types.\n\nHere's an expression and the result of integrating it numerically in x from 0 to 8.\"\n 8 alertWithDelay ≫","name":"integra","comment":""},
{"data":"≪ stopAnyGraphics\n   .chemType EVAL\n   .colorType EVAL\n   \"Beyond numbers, this calculator can calculate with many other kinds of objects.\n\nFlick through the stack (double-tap to go fullscreen) to see the many ways '+' can be used.\" 10 alertWithDelay\n   \"Ways to add:\"\n   .types\n   1\n   ≪ fromVec → x y ≪\n  x @typeof \" + \" + y @typeof + \":\" +\n   x y\n   x y +\n   ≫ ≫\n   DOSUBS\n   V→\n≫","name":"adding","comment":""},
{"data":"≪ \"Tap → (the next key), to advance to the next 'page' of soft-keys.\"\n5 alertWithDelay ≫","name":"⌸2","comment":"Read me, too"},
{"data":"function() {          \n    display.showGraphics(true);\n   \n    var step = 4;\n    var w = canvas.width;\n    var h = canvas.height;\n    var x = canvas.savedX || w/2;\n    var y = canvas.savedY || h/2;\n\n    var ctx = canvas.getContext(\"2d\");\n    ctx.moveTo(x, y);\n\n    for (var count=0; count<200; count++) {\n        var r = random();\n        if (r < 0.25) x += step;\n        else if (r < 0.5) x -= step;\n        else if (r < 0.75) y += step;\n        else y -= step;\n\n        ctx.lineTo(x, y);\n    }\n\n    ctx.strokeStyle = 'red';\n    ctx.stroke();\n\n    canvas.savedX = x;\n    canvas.savedY = y;\n\n    if (!display.hasShownWalkerMsg) {\n        display.hasShownWalkerMsg = true;\n        setTimeout(function() { string.alertWithDelay(\"A simple 2-D random walker.\\n\\nTap this soft-key repeatedly to keep 'walking'.\\n\\nDouble-tap (or tap ◉) to go fullscreen and tap to walk.\\nTwo-finger tap to take a screenshot.\\n\\nTap ✓ when done.\", 12); }, 0);\n    }\n      \n    if (!canvas.hasRegisteredHandlers) {\n        canvas.hasRegisteredHandlers = true;\ncanvas.addEventListener(\"touchstart\", arguments.callee, false);\n    }\n}","name":"walk","comment":""},
{"data":"function () {      \n    var n = 400;\n    var padWidth = ceil(n*0.7/8)*2;\n    var data = \"0x\";\n    var padChar = string.toString(\"0\");\n    var a = BigInteger.ZERO;\n    var one = BigInteger.ONE;\n    var b = one;\n    for (var i=0; i<n; i++) {\n        var val = BigNum[\"+\"](a, b);\n        a = b; b = val;\n        // convert number to hex string, slice off 0x, pad w/ zeroes, and concatenate with data string\n        data += string.pad(string.toString(BigNum.toString(BigNum.toHex(val)).slice(2)), padWidth, padChar).slice(1, -1);\n    }\n\n    var image = NDImage.toImage(string.toString(\"FibTri\" + n), string.toString(data), padWidth*4, n);\n    NDImage.toDisplay(image);\n\n    setTimeout(function() { string.alertWithDelay(\"This image, computed on-the-fly, shows the first 400 Fibonacci numbers, right-aligned and stacked top to bottom, with their bits as black and white pixels.\\n\\nDouble-tap (or tap ◉) to see all.\\n\\nTap ✓ when done.\", 12); }, 0);\n}","name":"FibTri","comment":"First 400 Fibonacci numbers made visible"},
{"data":"≪ stopAnyGraphics\n   \"You can store objects in named variables, and organize them in folders.\nThat's what the 'var' keys are for.\n\nvars accesses your folders\n\n⇢var stores an object under a name\nvar→ recalls it\n⌧var deletes it\"\n alert ≫","name":"vars","comment":""},
{"data":"≪ 3/4\n\"This calculator uses RPN.\n\nUnder RPN, you first enter what you want to calculate with, and then the operation.\nFor example, to compute two plus two, you enter 2 and 2, and *then* tap the + key.\n\nStack position 1 now contains 3/4. Add 1.5 to it, by typing 1.5 and *then* tapping +\"\n alert ≫","name":"entry","comment":""},
{"data":"≪ \"The calculator also has 'normal' algebraic entry.\n\nTap 'rpn' (left on the edit line) to switch to 'alg' mode.\nThe edit line will turn green.\n\nNow type 2+2 and tap the = key.\n\nSwitch back to rpn mode afterward (tap on 'alg') to continue the demo.\"\n alert ≫","name":"alg mode","comment":""},
{"data":"≪ \"The stack holds a history of your computations.\n\nThe Ans key let's you use previous results in new computations.\n\nThe ↶ key let's you undo the last computation.\n\nPlease see the ? page to learn about rpn, alg, and the stack.\"\n alert ≫","name":"stack","comment":""},
{"data":"≪ \"\nThe following need the Internet. \n\n'solv' shows how WolframAlpha™ can be used for solving.\n\n'Periodic' is a link that shows the Periodic Table of Elements.\"\n 7 alertWithDelay ≫","name":"⌸3","comment":""},
{"data":"≪ stopAnyGraphics \"AAPL\" Stocks.quote \n\"Here's a real-time quote for Apple stock.\n\nThe RPL program to do this is tiny:\n≪ 'AAPL' Stocks.quote ≫\nIt uses a short JavaScript program from the 'Stocks' folder.\n\nUsing the Internet in your functions is easy.\"\n13 alertWithDelay≫","name":"","comment":""},
{"data":"≪ 'x^3+3*x+3' 'x' solveFor @ right num ≫","name":"solv","comment":""},
{"data":"http://naivedesign.com/redist/atoms.html","name":"Periodic","comment":"Periodic table of elements"},
{"data":"≪ \"\nThis concludes the demo.\n\nPlease go to http://naivedesign.com/ND1 next, and do the QuickTour to learn usage basics.\n\nTap the Email soft-key if you want to email your stack now. (This looks nice if you took screenshots.)\"\n12 alertWithDelay ≫","name":"⌸4","comment":""},
{"data":"≪ email≫","name":"Email","comment":""},
{"data":"'asinh(x)*sin(x) = 1/x'","name":"eq","comment":"Current Equation"},
{"data":"[\"(-9.024892574778649,-9.133470893618945)\",\"(9.117938922034616,9.009360603194317)\"]","name":"PPAR","comment":"Plot Params"},
{"data":"[[2,3],[\"(2,5)\",\"(3,1)\"],[\"(2,5)\",3],[[2,5],[3,1]],[[[2,5],[3,1]],[[2,3],[5,1]]],[\"0x1234\",\"234o\"],[{\"type\":\"bignum\",\"needsRevival\":true,\"stringValue\":\"123456789876543212345\"},{\"type\":\"bignum\",\"needsRevival\":true,\"stringValue\":\"386334923247674564022\"}],[\"'3*x'\",\"'√(1-y)'\"],[\"'x-2'\",5],[\"\\\"break\\\"\",\"\\\"fast\\\"\"],[6,[1,\"(2,3)\",\"'4-5'\"]],[[1,\"(2,3)\",\"'4-5'\",\"\\\"a\\\"\",\"#123456\"],[\"(1,2)\",3,4,5,\"'6-7'\"]],[{\"type\":\"chem\",\"stringValue\":\"H2O\",\"inVector\":true,\"inMatrix\":true},{\"type\":\"chem\",\"stringValue\":\"NaCl\",\"inVector\":true,\"inMatrix\":true}],[{\"type\":\"color\",\"components\":[0.07058823529411765,0.20392156862745098,0.33725490196078434,1],\"inVector\":true,\"inMatrix\":true},{\"type\":\"color\",\"components\":[0.26666666666666666,0.7333333333333333,0.13333333333333333,1],\"inVector\":true,\"inMatrix\":true}]]","name":".types","comment":""},
{"data":{"type":"code","stringValue":"/* Color type definition */\nvar Color = {\n\ttype: \"color\",\n\tisLoaded: true,\n\tonlyOperatesOnOwnType: true,\n\n\twantsNumericalRepresentation: true,\t\t\n\tdenormalizer: 0xff, // max val of external color components representation\n\tnormalizer: 1.0 / 0xff, // value that will normalize external color components\n\n\tinstance: function(normalizedRGBAVector) { // the object's constructor function\n\t\tthis.type = Color.type;\n\t\tthis.components = normalizedRGBAVector;\n\t\tif (!(this.components.length == 4 && this.components[3] >= 0)) // no valid (non-NaN, non-undefined) alpha?\n\t\t\tthis.components[3] = 1.0; // default alpha to \"opaque\"\n\t\tthis.toString = function() { return Color.toString(this).replace(\"#\", \"0x\"); }; // to permit auto-conversion to String in JS\n\t\tthis.valueOf = function() { return Number(this.toString()); }; // to permit auto-conversion to Number in JS\n\t},\n\n\ttoArray: function(obj) { return Color.components(obj); }, // array deconstructor; permits auto-conversion to vector\n\tfromArray: function(vec) { return Color.fromComponents(vec); }, // array constructor; permits auto-conversion from vector\n\n\ttoString: function(obj) {\n\t\tvar funcs = calculator.functions;\n\t\treturn \"#\" + funcs.vector[\"*\"](obj.components, Color.denormalizer).map(function(val) { val = funcs.binary.decimalToHex(Math.round(val)); if (val.length == 1) val = \"0\" + val; return val; }).join(\"\");\n\t},\n\ttoHTML: function(obj) {\t\t\n\t\tvar colorString = Color.toString(obj);\n\n\t\tfunction colorBlock(color, width) {\n\t\t\tvar RGBString = Color.toString(color).slice(0,-2); // shave off alpha\n\t\t\treturn '<span style=\"display: inline-block; width: ' + width + '; height: ' + (display.isLarge() ? \"20\" : \"15\") + 'px; background-color: ' + RGBString + '; border: solid 1px\"></span>';\n\t\t}\n\n\t\tvar swatchWidth = (obj.inMatrix ? 10 : 36);\n\t\tvar isOpaque = Color.isOpaque(obj);\n\t\tvar HTMLforType = colorBlock(obj, String(isOpaque ? swatchWidth : swatchWidth/2) + \"%\");\n\t\tif (!isOpaque)\n\t\t\tHTMLforType += colorBlock(Color.alphaComposite(Color.fromString(colorString), calculator.vars.white), String(swatchWidth/2) + \"%\");\n\n\t\tif (!obj.inMatrix) {\n\t\t\tif (this.wantsNumericalRepresentation)\n\t\t\t\tHTMLforType += '<span style=\"font-family: monospace\">&nbsp;' + colorString + '</span>';\n\t\t\tHTMLforType += calculator.HTMLforTypeBadge(obj.type, display.isLarge() ? 46 : 39);\n\t\t}\n\n\t\treturn (HTMLforType);\n\t},\n\t\t\n\tisStringRepresentation: function(x) { return (x.match(/^#[0-9a-zA-Z]{6,8}$/) != null); },\n\tfromString: function(str) { // str is sure to satisfy isStringRepresentation\n\t\tvar Binary = calculator.functions.binary;\n\t\treturn new Color.instance([ Number(Binary.hexToDecimal(str[1]+str[2])) * Color.normalizer,\n\t\t\t\t\t\t\t\t   Number(Binary.hexToDecimal(str[3]+str[4])) * Color.normalizer,\n\t\t\t\t\t\t\t\t   Number(Binary.hexToDecimal(str[5]+str[6])) * Color.normalizer,\n\t\t\t\t\t\t\t\t   Number(Binary.hexToDecimal(str[7]+str[8])) * Color.normalizer ]);\n\t},\n\n\tfromNumber: function(x) {\n\t\treturn new Color.instance([x&0xff, x&0xff00 >> 8, x&ff0000 >> 16]);\n\t},\n\tfromRGBA: function(vec) { if (!(calculator.typeOf(vec) == \"vector\" && (vec.length == 3 || vec.length == 4))) throw Error(\"wrong type of argument\");\n\t\tvec = vec.map(function(val) { if (val < 0 || val > 0xff) throw Error(\"bad arg\"); return val; }); // make sure args are valid\n\t\treturn new Color.instance(calculator.functions.vector[\"*\"](vec, Color.normalizer));\n\t},\n\tfromComponents: function(vec) { if (!(calculator.typeOf(vec) == \"vector\" && (vec.length == 3 || vec.length == 4))) throw Error(\"wrong type of argument\");\n\t\treturn new Color.instance(vec.slice(0)); // slice() used to make a copy\n\t},\n\t\n\t// operators and functions\n\t\"saturate\": function(a) { a.components = a.components.map(function(val) { return (val < 0 ? 0 : val > 1.0 ? 1.0 : val); }); return a; },\n\t\"add\": function(a, b) { return this.fromArray(calculator.functions.vector[\"+\"](a.components, b.components)); },\n\t\"subtract\": function(a, b) { return this.fromArray(calculator.functions.vector[\"-\"](a.components, b.components)); },\n\t\"alphaComposite\": function(a, b) { var arr = []; var alpha = a.components[3]; for (var i=0; i<4; i++) arr[i] = b.components[i] + (a.components[i] - b.components[i]) * alpha; return new Color.instance(arr); },\n\t\"mix\": function(a, b) { var arr = []; var alpha = a.components[3]; for (var i=0; i<4; i++) arr[i] = (a.components[i] + b.components[i]) * 0.5; return new Color.instance(arr); },\n\t\"+\": function(a, b) { return this.saturate(this.add(a, b)); },\n\t\"-\": function(a, b) { return this.saturate(this.subtract(a, b)); },\n\t\"*\": function(a, b) { return this.alphaComposite(a, b); },\n\t\"inv\": function(a) { return new Color.instance([1.0 - a.components[0], 1.0 - a.components[1], 1.0 - a.components[2], a.components[3]]); },\n\t\"==\": function(a, b) { return calculator.functions.vector[\"==\"](a.components, b.components); },\t\t\n\t\"!=\": function(a, b) { return calculator.functions.vector[\"!=\"](a.components, b.components); },\t\t\n\t\"<\": function(a, b) { return (calculator.functions.vector[\"abs\"](a.components) < calculator.functions.vector[\"abs\"](b.components)); },\n\t\"<=\": function(a, b) { return (calculator.functions.vector[\"abs\"](a.components) <= calculator.functions.vector[\"abs\"](b.components)); },\n\t\">\": function(a, b) { return (calculator.functions.vector[\"abs\"](a.components) > calculator.functions.vector[\"abs\"](b.components)); },\n\t\">=\": function(a, b) { return (calculator.functions.vector[\"abs\"](a.components) >= calculator.functions.vector[\"abs\"](b.components)); },\n\t\"components\": function(x) { return x.components.slice(0); },\n\t\"alpha\": function(x) { return x.components[3]; },\n\t\"isOpaque\": function(x) { return (this.alpha(x) == 1.0); },\n\t\n\tonload: function() {\n\t\t// add some global constants\n\t\tcalculator.vars[\"transparent\"] = Color.fromString(\"#00000000\");\n\t\tcalculator.vars[\"black\"] = Color.fromString(\"#000000ff\");\n\t\tcalculator.vars[\"white\"] = Color.fromString(\"#ffffffff\");\n\t\t// add vector \"constructors\"\n\t\tcalculator.functions.vector[\"toColor\"] = Color.fromComponents;\n\t\tcalculator.functions.vector[\"RGBAToColor\"] = Color.fromRGBA;\n\t\t// add real \"constructor\"\n\t\tcalculator.functions[\"toColor\"] = Color.fromNumber;\n\t\t// add global object display configuration function\n\t\tcalculator.functions[\"wantsValuesOnColors\"] = function(b) { Color.wantsNumericalRepresentation = b; };\n\t}\n};\ncalculator.registerType(Color);\n"},"name":".colorType","comment":""},
{"data":{"type":"code","stringValue":"/* ChemFormula type definition */\nvar ChemFormula = {\n\ttype: \"chem\",\n\tisLoaded: true,\n\tprefix: \"/\",\n\n\ttoString: function(obj) { return ChemFormula.prefix + obj.stringValue; },\n\ttoHTML: function(obj) {\n\t\tvar stringForType = obj.stringValue.replace(/[*]/g, \"\").replace(/\\[([^+]+)\\]/g, \"$1\").replace(/[1-9]+(?![ ])/g, \"<sub>$&</sub>\");\n\t\treturn (stringForType + calculator.HTMLforTypeBadge(obj.type));\n\t},\n\tisStringRepresentation: function(x) { return (x[0] == ChemFormula.prefix && x.match(/^.[A-Z][a-z]?([1-9]+|([A-Z][a-z]?)|[()])+$/) != null); },\n\tfromString: function(str) {\n\t\tfunction formulaObj(s) {\n\t\t\tthis.type = ChemFormula.type;\n\t\t\tthis.stringValue = s.slice(1);\n\t\t\tthis.toString = function() { return ChemFormula.toString(this); };\n\t\t}\n\t\treturn new formulaObj(str);\n\t},\n\t\n\t\"+\": function(a, b) { // \"symbolic\" addition of formulas\n\t\tif (calculator.typeOf(a) == ChemFormula.type && calculator.typeOf(b) == ChemFormula.type)\n\t\t\treturn this.fromString(ChemFormula.prefix + a.stringValue + \" + \" + b.stringValue);\n\t\telse\n\t\t\tthrow Error(\"bad arg\");\n\t},\n\t\"*\": function(a, b) { // \"symbolic\" multiplication of a quantity with a formula\n\t\tif (typeof a !== \"number\" && typeof b !== \"number\") // one arg must be a number\n\t\t\tthrow Error(\"bad arg\");\n\t\tif (typeof a === \"object\" && a.type == ChemFormula.type) { var tmp = a; a = b; b = tmp; } // swap args, if scalar is 2nd arg\n\t\treturn this.fromString(ChemFormula.prefix + a + \" * [ \" + b.stringValue + \"] \");\n\t},\n\t\"info\": function(a) { calculator.functions.callWA(\"\", a.stringValue); },\n\t\"Mr\": function(obj) { // relative molar mass\n\t\tvar atomicWeights = { // relative atomic mass, IUPAC 2007 data\n\t\t\t\"H\": 1.00794, \"He\": 4.002602, \"Li\": 6.941, \"Be\": 9.012182, \"B\": 10.811, \"C\": 12.0107, \"N\": 14.0067, \"O\": 15.9994,\n\t\t\t\"F\": 18.9984032, \"Ne\": 20.1797, \"Na\": 22.98976928, \"Mg\": 24.305, \"Al\": 26.9815386, \"Si\": 28.0855, \"P\": 30.973762, \"S\": 32.065,\n\t\t\t\"Cl\": 35.453, \"Ar\": 39.948, \"K\": 39.0983, \"Ca\": 40.078, \"Sc\": 44.955912, \"Ti\": 47.867, \"V\": 50.9415, \"Cr\": 51.9961,\n\t\t\t\"Mn\": 54.938045, \"Fe\": 55.845, \"Co\": 58.933195, \"Ni\": 58.6934, \"Cu\": 63.546, \"Zn\": 65.38, \"Ga\": 69.723, \"Ge\": 72.64,\n\t\t\t\"As\": 74.9216, \"Se\": 78.96, \"Br\": 79.904, \"Kr\": 83.798, \"Rb\": 85.4678, \"Sr\": 87.62, \"Y\": 88.90585, \"Zr\": 91.224,\n\t\t\t\"Nb\": 92.90638, \"Mo\": 95.96, \"Tc\": 98, \"Ru\": 101.07, \"Rh\": 102.9055, \"Pd\": 106.42, \"Ag\": 107.8682, \"Cd\": 112.411,\n\t\t\t\"In\": 114.818, \"Sn\": 118.71, \"Sb\": 121.76, \"Te\": 127.6, \"I\": 126.90447, \"Xe\": 131.293, \"Cs\": 132.9054519, \"Ba\": 137.327,\n\t\t\t\"La\": 138.9054519, \"Ce\": 140.116, \"Pr\": 140.90765, \"Nd\": 144.242, \"Pm\": 145, \"Sm\": 150.36, \"Eu\": 151.964, \"Gd\": 157.25,\n\t\t\t\"Tb\": 158.92535, \"Dy\": 162.5, \"Ho\": 164.93032, \"Er\": 167.259, \"Tm\": 168.93421, \"Yb\": 173.054, \"Lu\": 174.9668, \"Hf\": 178.49,\n\t\t\t\"Ta\": 180.94788, \"W\": 183.84, \"Re\": 186.207, \"Os\": 190.23, \"Ir\": 192.217, \"Pt\": 195.084, \"Au\": 196.966569, \"Hg\": 200.59,\n\t\t\t\"Tl\": 204.3833, \"Pb\": 207.2, \"Bi\": 208.9804, \"Po\": 209, \"At\": 210, \"Rn\": 222, \"Fr\": 223, \"Ra\": 226, \"Ac\": 227,\n\t\t\t\"Th\": 232.03806, \"Pa\": 231.03588, \"U\": 238.02891, \"Np\": 237, \"Pu\": 244, \"Am\": 243, \"Cm\": 247, \"Bk\": 247, \"Cf\": 251,\n\t\t\t\"Es\": 252, \"Fm\": 257, \"Md\": 258, \"No\": 259, \"Lr\": 262, \"Rf\": 265, \"Db\": 268, \"Sg\": 271, \"Bh\": 272, \"Hs\": 270,\n\t\t\t\"Mt\": 276, \"Ds\": 281, \"Rg\": 280, \"Cn\": 285, \"Uut\": 284, \"Uuq\": 289, \"Uup\": 288, \"Uuh\": 293, \"Uuo\": 294\n\t\t};\n\t\tcalculator.vars.local = atomicWeights; // make atomicWeight our new set of local vars\n\t\tvar atomicWeight = calculator.eval(obj.stringValue.replace(/[[]/g, \"(\").replace(/[]]/g, \")\").replace(/([A-Z][a-z]?)([0-9]+)/g, \"$1*$2\").replace(/([A-Z][a-z]?)|([(])/g, \"+$&\").replace(/([)])([0-9]+)/g, \"$1*$2\"));\n\t\tcalculator.vars.local = {}; // reset local vars\n\t\treturn atomicWeight;\n\t},\n\teval: function(obj) { return ChemFormula.Mr(obj); }\n};\ncalculator.registerType(ChemFormula);\n"},"name":".chemType","comment":""} ],
"notes": "@author Naive Design\n@version 1.6\n@copyright 2009-2016 Naive Design\n@announcement This folder contains demo functions that showcase some of ND1s more impressive abilities.\n\n@description\n\nscribble shows what can be done with the Canvas element and how easy it is to gain access to it. It draws random Bezier curves with a fade effect. The code is example code from http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html.\n\nLuxTable links to a cool JavaScript iOS/canvas demo that uses pictures obtained from Flickr and multi-touch to permit gesture-based transformations.\n\nPeriodic is another external link to a page that does a nice rendition of the periodic table of elements. This last demo is copyrighted by Adobe and is part of their Spry code examples. The Spry JS framework is used in this demo.\n\ne_200 computes the Euler number, e, to 200 digits, using the BigInteger data type built into ND1.\n\nFibTri computes and displays a picture of the first 400 Fibonacci numbers, stacked atop each other right-aligned. A peculiar pattern of triangles can be seen. This demo, too, uses the BigInteger data type to compute the numbers.\n",
"uploadDate": "2016-06-18 11:17:59 +0000",
"downloadDate": "2016-06-18 09:26:24 +0000"
 }
